Math.max.apply(null,[3,4,9])  --->> 9




// 最简单的写法，只有一个参数，单行表达式
value => value
// 多个参数需要使用小括号包裹
(v1, v2) => v2 + v1
// 没有参数需要使用小括号包裹
() => "balabala"
// 多行表达式需要大括号包裹
(v1, v2) => {
    return v1 + v2
}
// 返回一个对象，需要用小括号包裹
() => ({a: 1})
// 立即执行函数，注意普通的立即执行函数的小括号包裹在最外面，箭头函数不需要
((value) => value)("balabala")复制代码


箭头函数和普通函数区别还是蛮大的，说几个常用的

没有 this，不能改变 this 绑定
不能通过 new 调用，当然也没有原型
没有 arguments 对象，不能有相同命名参数

箭头函数虽然没有 this ，但是还是可以在内部使用 this 的

this 的绑定取决于定义函数时的上下文环境
一旦函数调用，任何改变 this 的方法都无效



let o = { a: 1, a: 1, b: 2 };
let a = Object.assign({}, o);
如果o对象中有重复的,那么Object.assign会把想同的给覆盖掉


let obj = { a: 1 };
let obj1 = { a: 2 };
    // 已 obj 为原型
let a = Object.create(obj);
console.log("a :", a);
  // 改变 a 的原型为 obj1
const bs = Object.setPrototypeOf(a, obj1);
console.log("bs :", bs.a);


--超时
function delay() {
      return new Promise((resolve, reject) => {
        setTimeout(function() {
          resolve("finish");
        }, 1000);
      });
    }
function cancel() {
  return new Promise((resolve, reject) => {
    setTimeout(function() {
      resolve("cancel");
    }, 1000);
  });
}
// 接收的参数和 all 相同
let promise = Promise.race([delay(), cancel()]);
// race 中只要有一个任务完成，then 就会被调用，这样就可以 cancel 掉所有超时任务
promise.then(value => {
  console.log(value); // -> cancel
});



function one() {
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          resolve("success");
        });
      });
    }

function two() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve("twewer");
    });
  });
}

let promise = Promise.all([one(), two()]).then(value =>
  console.log("value", value)
);

过滤
const arr = [1, 2, 1, 2, 3, 5, 4, 5, 3, 4, 4, 4, 4];
    // var arr = [1, 2, 1, 2, 3, 5, 4, 5, 3, 4, 4, 4, 4];
    const str = arr.sort().reduce((prev, cur) => {
      if (prev.length === 0 || prev[prev.length - 1] !== cur) {
        prev.push(cur);
      }
      return prev;
    }, []);
